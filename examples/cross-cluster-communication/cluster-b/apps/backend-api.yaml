apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-api
  namespace: default
  labels:
    app: backend-api
    security: cross-cluster
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend-api
  template:
    metadata:
      labels:
        app: backend-api
        security: cross-cluster
        version: v1
    spec:
      serviceAccountName: backend-sa
      containers:
      - name: backend
        image: python:3.9-slim
        ports:
        - containerPort: 8080
        env:
        - name: CLUSTER_NAME
          value: "cluster-b"
        - name: SERVICE_NAME
          value: "backend-api"
        command: ["python", "-c"]
        args:
        - |
          from http.server import HTTPServer, BaseHTTPRequestHandler
          import json
          import os
          import socket

          class Handler(BaseHTTPRequestHandler):
              def do_GET(self):
                  if self.path == '/health':
                      self.send_response(200)
                      self.send_header('Content-type', 'application/json')
                      self.end_headers()
                      response = {
                          'status': 'healthy',
                          'cluster': os.getenv('CLUSTER_NAME', 'unknown'),
                          'service': os.getenv('SERVICE_NAME', 'unknown'),
                          'hostname': socket.gethostname(),
                          'version': 'v1'
                      }
                      self.wfile.write(json.dumps(response).encode())
                  elif self.path == '/api/data':
                      self.send_response(200)
                      self.send_header('Content-type', 'application/json')
                      self.send_header('X-Cluster', os.getenv('CLUSTER_NAME', 'unknown'))
                      self.send_header('X-Service', os.getenv('SERVICE_NAME', 'unknown'))
                      self.end_headers()
                      response = {
                          'message': 'Hello from backend API in cluster-b',
                          'data': {'items': [1, 2, 3, 4, 5]},
                          'timestamp': '2024-01-01T00:00:00Z'
                      }
                      self.wfile.write(json.dumps(response).encode())
                  else:
                      self.send_response(404)
                      self.end_headers()
                      self.wfile.write(b'Not Found')

          server = HTTPServer(('0.0.0.0', 8080), Handler)
          print('Backend API server running on port 8080')
          server.serve_forever()
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: backend-api
  namespace: default
  labels:
    app: backend-api
spec:
  selector:
    app: backend-api
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
  type: ClusterIP
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: backend-api-gateway
  namespace: default
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS
    tls:
      mode: MUTUAL
      credentialName: backend-api-tls
    hosts:
    - "backend-api.cluster-b.local"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: backend-api-vs
  namespace: default
spec:
  hosts:
  - "backend-api.cluster-b.local"
  gateways:
  - backend-api-gateway
  http:
  - match:
    - uri:
        prefix: "/api"
    route:
    - destination:
        host: backend-api.default.svc.cluster.local
        port:
          number: 8080
    timeout: 30s
    retries:
      attempts: 3
      perTryTimeout: 10s
  - match:
    - uri:
        prefix: "/health"
    route:
    - destination:
        host: backend-api.default.svc.cluster.local
        port:
          number: 8080
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: backend-sa
  namespace: default
  labels:
    app: backend-api
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: backend-network-policy
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: backend-api
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 8080
  - from:
    - podSelector:
        matchLabels:
          security: cross-cluster
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 15012  # Istio pilot
  - to: []
    ports:
    - protocol: UDP
      port: 53   # DNS
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-pdb
  namespace: default
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: backend-api