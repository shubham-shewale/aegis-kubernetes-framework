apiVersion: v1
kind: Pod
metadata:
  name: test-s3-access
  namespace: default
  labels:
    app: test-s3-access
    aegis.example: irsa
spec:
  serviceAccountName: s3-access-sa
  restartPolicy: Never
  containers:
  - name: test-s3-access
    image: amazonlinux:2
    command:
    - /bin/bash
    - -c
    - |
      # Install AWS CLI
      yum update -y && yum install -y awscli jq curl

      echo "=== IRSA Validation Test ==="
      echo "Testing IAM Roles for Service Accounts functionality"

      # Test 1: Verify AWS credentials are available
      echo "1. Checking AWS credentials..."
      if aws sts get-caller-identity > /dev/null 2>&1; then
        echo "‚úÖ AWS credentials available"
      else
        echo "‚ùå AWS credentials not available"
        exit 1
      fi

      # Test 2: Verify assumed role
      echo "2. Checking assumed IAM role..."
      IDENTITY=$(aws sts get-caller-identity)
      ROLE_ARN=$(echo $IDENTITY | jq -r '.Arn')
      ACCOUNT_ID=$(echo $IDENTITY | jq -r '.Account')
      USER_ID=$(echo $IDENTITY | jq -r '.UserId')

      echo "   Role ARN: $ROLE_ARN"
      echo "   Account ID: $ACCOUNT_ID"
      echo "   User ID: $USER_ID"

      if echo "$ROLE_ARN" | grep -q "s3-access-role"; then
        echo "‚úÖ Correct IAM role assumed"
      else
        echo "‚ùå Incorrect IAM role assumed"
        exit 1
      fi

      # Test 3: Test S3 read access
      echo "3. Testing S3 read access..."
      if aws s3 ls > /dev/null 2>&1; then
        echo "‚úÖ S3 read access working"
        BUCKET_COUNT=$(aws s3 ls | wc -l)
        echo "   Accessible buckets: $BUCKET_COUNT"
      else
        echo "‚ö†Ô∏è  S3 read access limited (expected for read-only role)"
      fi

      # Test 4: Test S3 write access (should fail)
      echo "4. Testing S3 write access (should fail)..."
      TEST_BUCKET="test-irsa-bucket-$(date +%s)"
      if aws s3 mb s3://$TEST_BUCKET 2>/dev/null; then
        echo "‚ùå Unexpected: S3 write access allowed"
        aws s3 rb s3://$TEST_BUCKET --force 2>/dev/null || true
      else
        echo "‚úÖ S3 write access correctly denied"
      fi

      # Test 5: Verify token refresh
      echo "5. Testing credential refresh..."
      sleep 60
      if aws sts get-caller-identity > /dev/null 2>&1; then
        echo "‚úÖ Credentials automatically refreshed"
      else
        echo "‚ùå Credential refresh failed"
        exit 1
      fi

      # Test 6: Check environment variables
      echo "6. Checking environment variables..."
      echo "   AWS_REGION: ${AWS_REGION:-not-set}"
      echo "   CLUSTER_NAME: ${CLUSTER_NAME:-not-set}"

      echo ""
      echo "=== IRSA Test Summary ==="
      echo "‚úÖ Service Account: s3-access-sa"
      echo "‚úÖ IAM Role: $(basename $ROLE_ARN)"
      echo "‚úÖ AWS Account: $ACCOUNT_ID"
      echo "‚úÖ Credential Type: WebIdentityToken"
      echo ""
      echo "üéâ IRSA is working correctly!"
      echo "The pod can assume IAM roles without storing AWS credentials."
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "100m"
    env:
    - name: AWS_REGION
      value: "us-east-1"
    - name: CLUSTER_NAME
      valueFrom:
        configMapKeyRef:
          name: cluster-info
          key: cluster-name
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
---
apiVersion: v1
kind: Pod
metadata:
  name: test-dynamodb-access
  namespace: default
  labels:
    app: test-dynamodb-access
    aegis.example: irsa
spec:
  serviceAccountName: dynamodb-access-sa  # You'll need to create this
  restartPolicy: Never
  containers:
  - name: test-dynamodb
    image: amazonlinux:2
    command:
    - /bin/bash
    - -c
    - |
      yum update -y && yum install -y awscli

      echo "=== DynamoDB IRSA Test ==="
      aws sts get-caller-identity

      # Test DynamoDB access (create table if it doesn't exist)
      TABLE_NAME="test-irsa-table"
      aws dynamodb describe-table --table-name $TABLE_NAME 2>/dev/null || \
        aws dynamodb create-table --table-name $TABLE_NAME \
          --attribute-definitions AttributeName=id,AttributeType=S \
          --key-schema AttributeName=id,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST

      echo "‚úÖ DynamoDB access test completed"
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "100m"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: irsa-validation-job
  namespace: default
  labels:
    app: irsa-validation
    aegis.example: irsa
spec:
  template:
    spec:
      serviceAccountName: s3-access-sa
      restartPolicy: Never
      containers:
      - name: irsa-validator
        image: amazonlinux:2
        command:
        - /bin/bash
        - -c
        - |
          yum update -y && yum install -y awscli jq

          echo "=== Automated IRSA Validation ==="

          # Validate role assumption
          IDENTITY=$(aws sts get-caller-identity)
          ROLE_NAME=$(echo $IDENTITY | jq -r '.Arn' | awk -F'/' '{print $2}')

          if [ "$ROLE_NAME" = "s3-access-role" ]; then
            echo "‚úÖ Correct IAM role assumed: $ROLE_NAME"
            exit 0
          else
            echo "‚ùå Incorrect IAM role: $ROLE_NAME"
            exit 1
          fi
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000